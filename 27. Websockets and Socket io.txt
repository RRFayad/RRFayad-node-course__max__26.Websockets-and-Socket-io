406. Intro
    - Real-Time Web Services with WebSockets

    - A protocol that allow us to build real-time web services

    - We are gonna see what this means, why to use it and how

407. What Are Websockets & Why Would You Use Them?

    - Status Quo - How what we created up to now worklike?
        - Client
            Send a request to the server
            Get a Response from the server
    
        - This is like a 'Pull' method, where the client must act, sending a request, to receive a response from the server (and it's commonly enough)

    - But what if we want the server to "Push" information, without a request?
         -For example, a chat application, where the receiver will not send a request to check if there are incoming messages?
         - We want to inform a client when something change on the server

    - Then we can use WebSockets instead of Http
        - WebSocket are estabilished via Http, but they are different as allow the server to push data

    - We can use both together in the same Node App

408. Websocket Solutions - An Overview

    - Web Sockets are the concept, Socket.io

409. Setting Up Socket.io on the Server
    - We have to add it in both server and in the client

    - On the server project:
        npm install socket.io

    - On the server app:
        app.listen(8080);
            const io = require("socket.io")(server, {
                cors: {
                    origin: "http://localhost:3000",
                    methods: ["GET", "POST"],
                },
            });
            io.on("connection", (socket) => {       // This is an event listener to the connection event
            console.log("Client Connected");
        });

    * Now we gotta create the socket io connection in the client side

410. Establishing a Connection From the Client
    - On the client project:
        - npm install socket.io-client

        - *import it in the file we want the connection
            import openSocket from "socket.io-client";
            openSocket("http://localhost:8080");
            
            When the component mounts (componentDidMount or useEffect):
        -     openSocket("http://localhost:8080");

411. Identifying Realtime Potential and implementing the logic:
    - What can we do in Realtime?
        - If user A creates a new post, user B could see it instantly!

    1. In the front-end:
        - We created a addPost method inside a class (that's why the weird syntax)
        
            addPost = (post) => {
            this.setState((prevState) => {
                const updatedPosts = [...prevState.posts];
                if (prevState.postPage === 1) {
                updatedPosts.pop();
                updatedPosts.unshift(post);
                }
                return {
                posts: updatedPosts,
                totalPosts: prevState.totalPosts++,
                };
            });
            };
    
    2. In the api:
    
    2.1. We created an socket.js file;
        * Have to set the Cors
    
    2.2. Called it in the app.
            const server = app.listen(8080);
                const io = require("./socket").init(server, {
                    cors: {
                        origin: "http://localhost:3000",
                        methods: ["GET", "POST"],
                    },
                });
                io.on("connection", (socket) => {
                console.log("Client Connected");
            });

413. Synchronizing POST Additions
    
    - In the create post controller, when we create a post, we will emit an event, that we called posts, and set a payload with it;
        * Immediatly before the response
        
        io.getIo().emit("posts", { action: "create", post:post })


    - In the front end, we created a logic that listen the post event and proccess the payload:
        *In the useEffect or the ComponentDidMount() to React get the new data and update:

        const socket = openSocket("http://localhost:8080");
        
        socket.on("posts", (data) => {
            if (data.action === "create") {
                this.addPost(data.post);
            }
        });

416. Sorting Correctly
    - Used mongoose sort with the createdAt to sort correctely in the getPosts controller